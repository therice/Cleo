local Encounter, Util
describe("LibEncounter", function()
    setup(function()
	    loadfile("Test/TestSetup.lua")(false, 'LibEncounter')
        loadfile("Libs/LibEncounter-1.1/Test/BaseTest.lua")()
        LoadDependencies()
        ParseXmlAndLoad('Libs/LibEncounter-1.1/LibEncounter-1.1.xml')
	    ConfigureLogging()
        Encounter = LibStub('LibEncounter-1.1', true)
        Util = LibStub('LibUtil-1.2', true)
    end)
    teardown(function()
        After()
    end)
    describe("creature names", function()
        it("resolved from ids", function()
            assert.equal("Lucifron", Encounter:GetCreatureName(12118))
        end)
    end)
    describe("map names", function()
        it("resolved from map ids", function()
            assert.equal("Molten Core", Encounter:GetMapName(409))
        end)
    end)
    describe("map ids", function()
        it("resolved from creature ids", function()
            assert.equal(409, Encounter:GetCreatureMapId(12118))
        end)
        it("resolved from map names", function()
            assert.equal(409, Encounter:GetMapId('Molten Core'))
        end)
    end)
    describe("creature detail", function()
        it("resolved from creature ids", function()
            local creature, map = Encounter:GetCreatureDetail(12118)
            assert.equal("Molten Core", map)
            assert.equal("Lucifron", creature)
        end)
    end)
    describe("encounter detail", function()
        it("resolved from encounter id (single creature)", function()
            local creatureIds = Encounter:GetEncounterCreatureId(613)
            assert(type(creatureIds) == 'table')
            assert.equal(#creatureIds, 1)
            assert.equal(creatureIds[1], 11983)
        end)
        it("resolved from encounter id (multiple creatures)", function()
            local creatureIds = Encounter:GetEncounterCreatureId(710)
            assert(type(creatureIds) == 'table')
            assert.equal(#creatureIds, 3)
            assert.equal(creatureIds[1], 15544)
        end)
    end)
end)